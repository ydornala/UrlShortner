{"version":3,"sources":["api/Links/link.controller.js"],"names":["respondWithResult","res","statusCode","entity","status","json","handleEntityNotFound","end","handleError","err","send","index","req","Link","find","exec","then","catch","create","longUrl","body","baseUrl","config","get","validUrl","isUri","urlCode","shortid","generate","findOne","linkFound","shortUrl","url","error"],"mappings":";;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA,SAASA,iBAAT,CAA2BC,GAA3B,EAAgCC,UAAhC,EAA4C;AACxCA,EAAAA,UAAU,GAAGA,UAAU,IAAI,GAA3B;AACA,SAAO,UAASC,MAAT,EAAiB;AACpB,QAAGA,MAAH,EAAW;AACP,aAAOF,GAAG,CAACG,MAAJ,CAAWF,UAAX,EAAuBG,IAAvB,CAA4BF,MAA5B,CAAP;AACH;;AACD,WAAO,IAAP;AACH,GALD;AAMH;;AAED,SAASG,oBAAT,CAA8BL,GAA9B,EAAmC;AAC/B,SAAO,UAASE,MAAT,EAAiB;AACpB,QAAG,CAACA,MAAJ,EAAY;AACRF,MAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBG,GAAhB;AACA,aAAO,IAAP;AACH;;AAED,WAAOJ,MAAP;AACH,GAPD;AAQH;;AAED,SAASK,WAAT,CAAqBP,GAArB,EAA0BC,UAA1B,EAAsC;AAClCA,EAAAA,UAAU,GAAGA,UAAU,IAAI,GAA3B;AACA,SAAO,UAASO,GAAT,EAAc;AACjBR,IAAAA,GAAG,CAACG,MAAJ,CAAWF,UAAX,EAAuBQ,IAAvB,CAA4BD,GAA5B;AACH,GAFD;AAGH;;AAEM,SAASE,KAAT,CAAeC,GAAf,EAAoBX,GAApB,EAAyB;AAC5B,SAAOY,cAAKC,IAAL,GACFC,IADE,GAEFC,IAFE,CAEGhB,iBAAiB,CAACC,GAAD,CAFpB,EAGFgB,KAHE,CAGIT,WAAW,CAACP,GAAD,CAHf,CAAP;AAIH;;AAEM,SAASiB,MAAT,CAAgBN,GAAhB,EAAqBX,GAArB,EAA0B;AAC7B,MAAM;AAAEkB,IAAAA;AAAF,MAAcP,GAAG,CAACQ,IAAxB;;AACA,MAAMC,OAAO,GAAGC,gBAAOC,GAAP,CAAW,SAAX,CAAhB,CAF6B,CAI7B;;;AACA,MAAG,CAACC,kBAASC,KAAT,CAAeJ,OAAf,CAAJ,EAA6B;AACzB,WAAOpB,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,kBAArB,CAAP;AACH,GAP4B,CAS7B;;;AACA,MAAMqB,OAAO,GAAGC,iBAAQC,QAAR,EAAhB;;AAEA,MAAGJ,kBAASC,KAAT,CAAeN,OAAf,CAAH,EAA4B;AACxB,QAAI;AACD,aAAON,cAAKgB,OAAL,CAAa;AAAEV,QAAAA;AAAF,OAAb,EACDH,IADC,CACIc,SAAS,IAAI;AACf,YAAGA,SAAH,EAAc;AACX,iBAAO7B,GAAG,CAACI,IAAJ,CAASyB,SAAT,CAAP;AACF;;AAED,eAAO,IAAP;AACH,OAPC,EAQDd,IARC,CAQI,MAAM;AACR,YAAMe,QAAQ,aAAMV,OAAN,cAAiBK,OAAjB,CAAd;AAEA,YAAMM,GAAG,GAAG;AACRb,UAAAA,OADQ;AAERY,UAAAA,QAFQ;AAGRL,UAAAA;AAHQ,SAAZ;AAMA,eAAOb,cAAKK,MAAL,CAAYc,GAAZ,EACFhB,IADE,CACGhB,iBAAiB,CAACC,GAAD,CADpB,EAEFgB,KAFE,CAEIT,WAAW,CAACP,GAAD,CAFf,CAAP;AAGH,OApBC,CAAP;AAsBF,KAvBD,CAuBE,OAAOgC,KAAP,EAAc;AACZhC,MAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,kBAArB;AACH;AACJ;AACJ","sourcesContent":["import Link from './link.model';\nimport shortid from 'shortid';\nimport validUrl from 'valid-url';\nimport config from 'config';\n\nfunction respondWithResult(res, statusCode) {\n    statusCode = statusCode || 200;\n    return function(entity) {\n        if(entity) {\n            return res.status(statusCode).json(entity);\n        }\n        return null;\n    }\n}\n\nfunction handleEntityNotFound(res) {\n    return function(entity) {\n        if(!entity) {\n            res.status(404).end();\n            return null;\n        }\n\n        return entity;\n    }\n}\n\nfunction handleError(res, statusCode) {\n    statusCode = statusCode || 500;\n    return function(err) {\n        res.status(statusCode).send(err);\n    }\n}\n\nexport function index(req, res) {\n    return Link.find()\n        .exec()\n        .then(respondWithResult(res))\n        .catch(handleError(res));\n}\n\nexport function create(req, res) {\n    const { longUrl } = req.body;\n    const baseUrl = config.get('baseUrl');\n\n    // Check base Url\n    if(!validUrl.isUri(baseUrl)) {\n        return res.status(401).json('Invalid base Url');\n    }\n\n    // Create url Code\n    const urlCode = shortid.generate();\n\n    if(validUrl.isUri(longUrl)) {\n        try {\n           return Link.findOne({ longUrl })\n                .then(linkFound => {\n                    if(linkFound) {\n                       return res.json(linkFound);\n                    }\n                    \n                    return null;\n                })\n                .then(() => {\n                    const shortUrl = `${baseUrl}/${urlCode}`;\n\n                    const url = {\n                        longUrl,\n                        shortUrl,\n                        urlCode\n                    };\n                    \n                    return Link.create(url)\n                        .then(respondWithResult(res))\n                        .catch(handleError(res));\n                });\n\n        } catch (error) {\n            res.status(401).json('Invalid long url');\n        }\n    }\n}"],"file":"link.controller.js"}